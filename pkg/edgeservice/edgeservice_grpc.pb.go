// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: edgeservice/edgeservice.proto

package edgeservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GwEdgeServiceClient is the client API for GwEdgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GwEdgeServiceClient interface {
	// Interface to get slice gateway service info
	UpdateSliceGwServiceMap(ctx context.Context, in *SliceGwServiceMap, opts ...grpc.CallOption) (*GwEdgeResponse, error)
}

type gwEdgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGwEdgeServiceClient(cc grpc.ClientConnInterface) GwEdgeServiceClient {
	return &gwEdgeServiceClient{cc}
}

func (c *gwEdgeServiceClient) UpdateSliceGwServiceMap(ctx context.Context, in *SliceGwServiceMap, opts ...grpc.CallOption) (*GwEdgeResponse, error) {
	out := new(GwEdgeResponse)
	err := c.cc.Invoke(ctx, "/edgeservice.GwEdgeService/UpdateSliceGwServiceMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GwEdgeServiceServer is the server API for GwEdgeService service.
// All implementations must embed UnimplementedGwEdgeServiceServer
// for forward compatibility
type GwEdgeServiceServer interface {
	// Interface to get slice gateway service info
	UpdateSliceGwServiceMap(context.Context, *SliceGwServiceMap) (*GwEdgeResponse, error)
	mustEmbedUnimplementedGwEdgeServiceServer()
}

// UnimplementedGwEdgeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGwEdgeServiceServer struct {
}

func (UnimplementedGwEdgeServiceServer) UpdateSliceGwServiceMap(context.Context, *SliceGwServiceMap) (*GwEdgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSliceGwServiceMap not implemented")
}
func (UnimplementedGwEdgeServiceServer) mustEmbedUnimplementedGwEdgeServiceServer() {}

// UnsafeGwEdgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GwEdgeServiceServer will
// result in compilation errors.
type UnsafeGwEdgeServiceServer interface {
	mustEmbedUnimplementedGwEdgeServiceServer()
}

func RegisterGwEdgeServiceServer(s grpc.ServiceRegistrar, srv GwEdgeServiceServer) {
	s.RegisterService(&GwEdgeService_ServiceDesc, srv)
}

func _GwEdgeService_UpdateSliceGwServiceMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SliceGwServiceMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GwEdgeServiceServer).UpdateSliceGwServiceMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeservice.GwEdgeService/UpdateSliceGwServiceMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GwEdgeServiceServer).UpdateSliceGwServiceMap(ctx, req.(*SliceGwServiceMap))
	}
	return interceptor(ctx, in, info, handler)
}

// GwEdgeService_ServiceDesc is the grpc.ServiceDesc for GwEdgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GwEdgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "edgeservice.GwEdgeService",
	HandlerType: (*GwEdgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateSliceGwServiceMap",
			Handler:    _GwEdgeService_UpdateSliceGwServiceMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "edgeservice/edgeservice.proto",
}
